/*
 * Copyright (c) 2023-2024 "Neo4j,"
 * Neo4j Sweden AB [https://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.neo4j.driver.jdbc.translator.impl;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.IntBinaryOperator;

/**
 * Produces parameter names. For jOOQ parameters identifying themselves as indexed, this
 * is straight forward just increasing. However, even plain {@literal ?} identifies
 * themselves as named (See
 * <a href="https://github.com/jOOQ/jOOQ/issues/16332">16332</a>), with a name starting at
 * {@literal 0}, which is not quite helpful for a statement that does not get executed
 * through jOOQ. We try to see now if the name is a parseable number and if so, we
 * increment that by 1 and then align with any other actually indexed parameters so far.
 *
 * @author Michael J. Simons
 */
final class ParameterNameGenerator {

	private static final IntBinaryOperator ACCUMULATOR = (o, n) -> {

		if (o == n) {
			return o + 1;
		}

		var diff = n - o;
		if (diff >= 1) {
			return n;
		}

		return o + 1;
	};

	private final AtomicInteger parameterIndex = new AtomicInteger(0);

	/**
	 * Retrieves a new index.
	 * @return a new name
	 */
	String newIndex() {
		return Integer.toString(this.parameterIndex.incrementAndGet());
	}

	/**
	 * Retrieves a new name based derived from {@code name}.
	 * @param name the name to derive the final name from
	 * @return a new name
	 */
	String newIndex(String name) {
		if (name == null) {
			return null;
		}

		// This is all pretty uncool
		try {
			// The name generated by jOOQ starts at 0 (it's their binding index, not the
			// actual SQL parameter index)
			var idx = Integer.parseInt(name) + 1;
			return Integer.toString(this.parameterIndex.accumulateAndGet(idx, ACCUMULATOR));
		}
		catch (NumberFormatException nf) {
			return name;
		}
	}

}
